type: custom:vertical-stack-in-card
mode: vertical
cards:
  - type: custom:mushroom-template-card
    primary: Trapkast
    icon: hue:room-stairs
    icon_color: teal
    layout: horizontal
    entity: light.overloop1_hue
    secondary: >-
      {{states('sensor.trapkast_motion_aqara_device_temperature') }}Â°C |
      {{states('sensor.trapkast_motion_aqara_illuminance_lux') | int }}lux
    tap_action:
      action: navigate
      navigation_path: /lovelace-tablet/trapkast
    badge_icon: |
      {% if is_state('binary_sensor.trapkast_motion_aqara_occupancy', 'on') %}
        mdi:human-greeting
      {% else %}  
        mdi:motion-sensor-off
      {% endif %}
    badge_color: |
      {% if is_state('binary_sensor.trapkast_motion_aqara_occupancy', 'on') %}
        green
      {% else %}  
        disabled
      {% endif %}
  - type: custom:vertical-stack-in-card
    horizontal: true
    cards:
      - type: custom:mushroom-template-card
        entity: light.trapkast_hue
        layout: vertical
        icon: |-
          {% if is_state('light.trapkast_hue', 'on') %}
          hue:single-spot
          {% else %}
          hue:single-spot
          {% endif %}
        icon_color: |-
          {% if is_state('light.trapkast_hue', 'on') %}
            yellow
          {% endif %}
        tap_action:
          action: toggle
        double_tap_action:
          action: call-service
          service: input_boolean.toggle
          target:
            entity_id: input_boolean.node_red_trapkast_automations
          data: {}
        card_mod:
          style:
            mushroom-shape-icon$: >
              {% if is_state('input_boolean.node_red_trapkast_automations',
              'on') %}

              .shape {
                --shape-animation: ping 3s infinite;
              }

              @keyframes ping {
                0% {
                  box-shadow: 0 0 5px 1px rgba(var(--rgb-blue), 0.7);
                }
                
                100% {
                  box-shadow: 0 0 5px 5px transparent;
                }
              }

              {% elif is_state('input_boolean.node_red_trapkast_automations',
              'off') %}

              {% endif %}
  - type: custom:mushroom-chips-card
    chips:
      - type: template
        icon: mdi:motion-sensor
        icon_color: |2-
            {% if is_state(entity, 'on') %}
            blue
            {% else %}
            grey
            {% endif %}
        entity: binary_sensor.trapkast_motion_aqara_occupancy
        tap_action:
          action: more-info
      - type: template
        icon: mdi:water-pump
        icon_color: |2-
            {% if states('sensor.watermeter_flow') | float > 0 %}
            blue
            {% else %}
            grey
            {% endif %}
        entity: sensor.watermeter_flow
        tap_action:
          action: more-info
    alignment: end
    card_mod:
      style:
        mushroom-template-chip: |
          ha-card {
              --ha-card-box-shadow: none;
              --ha-card-border-width: 0;
              --chip-background: none;
              --chip-box-shadow: none;
              --chip-spacing: 0;
              : -36px;
          } 
        mushroom-template-chip:nth-child(1)$: >
          {% if is_state('binary_sensor.trapkast_motion_aqara_occupancy','on')
          %}

          ha-state-icon {
            animation: clip 2s linear infinite;
          }

          @keyframes clip {
            50% { clip-path: polygon(0 0, 55% 0, 100% 100%, 0 100%); }
          }

          .shape {
            --shape-animation: motion 2s linear infinite;
          }

          @keyframes motion {
            0%, 100% { --shape-color: rgba(var(--rgb-blue), 0.3); }
            50% { --shape-color: rgba(var(--rgb-blue), 0.2); }
          }

          }

          {% else %}


          {% endif %}

          }
        mushroom-template-chip:nth-child(2)$: |
          {% if states('sensor.watermeter_flow') | float > 0 %}
          ha-state-icon {
            animation: drip 2s infinite; 
          } @keyframes drip {
            0%, 100% { clip-path: inset(0 0 0 0); }
            15%, 85% { clip-path: polygon(0 0, 100% 0, 100% 57%, 64% 57%, 64% 100%, 0 100%); }
          }
          }
          {% else %}

          {% endif %}
          }
